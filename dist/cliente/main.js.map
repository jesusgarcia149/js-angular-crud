{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \".container{\\r\\n\\tborder-radius: 4%;\\r\\n\\tmargin-top: 70px;\\r\\n\\tmargin-bottom: 70px;\\r\\n\\tpadding: 30px;\\r\\n\\tbackground: rgba(255,255,255,1);\\r\\n}\\r\\nbutton{\\r\\n\\twidth: 100%;\\r\\n}\\r\\nth, td {\\r\\n\\twidth: 100%;\\r\\n}\"","module.exports = \"<!-- Bootstrap -->\\n<link rel=\\\"stylesheet\\\" href=\\\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\\\">\\n<script src=\\\"https://code.jquery.com/jquery-3.2.1.slim.min.js\\\"></script>\\n<script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js\\\"></script>\\n<script src=\\\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\\\"></script>\\n\\n\\n<!--The content below is only a placeholder and can be replaced.-->\\n<div class=\\\"container\\\">\\n\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-sm-8\\\">\\n      <h1 class=\\\"text-center\\\">\\n        {{title}}\\n      </h1>\\n    </div>\\n    <div class=\\\"col-sm-4\\\">\\n      <div class=\\\"alert alert-success alert-disissable\\\" *ngIf=\\\"msg\\\">\\n        <a href=\\\"#\\\" class=\\\"close\\\" (click)=\\\"closeAlert()\\\">\\n          &times;\\n        </a>\\n        {{msg}}\\n      </div>\\n    </div>\\n  </div>\\n\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-sm-4\\\">\\n      <img src=\\\"https://upload.wikimedia.org/wikipedia/commons/thumb/c/cf/Angular_full_color_logo.svg/1200px-Angular_full_color_logo.svg.png\\\" width=\\\"100%\\\">\\n    </div>\\n    <div class=\\\"col-sm-8\\\">\\n      <h2>Create employeed:</h2>\\n      <form class=\\\"form-horizontal\\\">\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"name\\\" class=\\\"control-label col-sm-2\\\">\\n            name\\n          </label>\\n          <div class=\\\"col-sm-10\\\">\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"name\\\" name=\\\"name\\\" [(ngModel)]=\\\"model.name\\\" placeholder=\\\"Enter a new name\\\">\\n          </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"position\\\" class=\\\"control-label col-sm-2\\\">\\n            position\\n          </label>\\n          <div class=\\\"col-sm-10\\\">\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"position\\\" name=\\\"position\\\" [(ngModel)]=\\\"model.position\\\" placeholder=\\\"Enter a new position\\\">\\n          </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"email\\\" class=\\\"control-label col-sm-2\\\">\\n            email\\n          </label>\\n          <div class=\\\"col-sm-10\\\">\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"email\\\" name=\\\"email\\\" [(ngModel)]=\\\"model.email\\\" placeholder=\\\"Enter a new email\\\">\\n          </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"col-sm-10 col-sm-offset-2\\\">\\n            <button type=\\\"submit\\\" class=\\\"btn btn-success\\\" (click)=\\\"addEmployee()\\\">\\n              save\\n            </button>\\n          </div>\\n        </div>\\n      </form>\\n    </div>\\n  </div>\\n\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-sm-8\\\">\\n      <h2>Read Data:</h2>\\n      <table class=\\\"table table-bordered table-responsive\\\">\\n        <thead>\\n          <tr>\\n            <th>Name</th>\\n            <th>Position</th>\\n            <th>Email</th>\\n            <th>Actions</th>\\n          </tr>\\n        </thead>\\n        <tbody>\\n          <tr *ngFor=\\\"let employee of employees; let i = index\\\">\\n            <td>{{employee.name}}</td>\\n            <td>{{employee.position}}</td>\\n            <td>{{employee.email}}</td>\\n            <td>\\n              <a href=\\\"#\\\" (click)=\\\"editEmployee(i)\\\" class=\\\"btn btn-success\\\">\\n                Edit\\n              </a>\\n              <a href=\\\"#\\\" (click)=\\\"deleteEmployee(i)\\\" class=\\\"btn btn-danger\\\">\\n                Delete\\n              </a>\\n            </td>\\n          </tr>\\n        </tbody>\\n      </table>\\n    </div>\\n    <div class=\\\"col-sm-4\\\" [hidden]=\\\"hideUpdate\\\">\\n      <h2>Update data:</h2>\\n      <form class=\\\"form-horizontal\\\">\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"name2\\\" class=\\\"control-label col-sm-2\\\">\\n            name\\n          </label>\\n          <div class=\\\"col-sm-10\\\">\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"name2\\\" name=\\\"name2\\\" [(ngModel)]=\\\"model2.name\\\" placeholder=\\\"Enter a new name\\\">\\n          </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"position2\\\" class=\\\"control-label col-sm-2\\\">\\n            position\\n          </label>\\n          <div class=\\\"col-sm-10\\\">\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"position2\\\" name=\\\"position2\\\" [(ngModel)]=\\\"model2.position\\\" placeholder=\\\"Enter a new position2\\\">\\n          </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"email2\\\" class=\\\"control-label col-sm-2\\\">\\n            email\\n          </label>\\n          <div class=\\\"col-sm-10\\\">\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"email2\\\" name=\\\"email2\\\" [(ngModel)]=\\\"model2.email\\\" placeholder=\\\"Enter a new email2\\\">\\n          </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"col-sm-10 col-sm-offset-2\\\">\\n            <button type=\\\"submit\\\" class=\\\"btn btn-success\\\" (click)=\\\"updateEmployee(i)\\\">\\n              update\\n            </button>\\n          </div>\\n        </div>\\n      </form>\\n    </div>\\n  </div>\\n\\n</div>\\n\\n\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title:string = 'Angular CRUD';\n  msg:string = '';\n  hideUpdate:boolean = true;\n\n  employees = [];\n\n  model:any = {};\n  model2:any = {};\n\n  addEmployee():void{\n  \tthis.employees.push(this.model);\n  \tthis.model = {};\n  \tthis.msg = 'Employee added successful';\n  }\n  deleteEmployee(i):void{\n  \tthis.employees.splice(i, 1);\n  \tthis.msg = 'Employee deleted successful';\n  }\n  myValue;\n  editEmployee(i):void{\n  \tthis.hideUpdate = false;\n  \tthis.model2.name = this.employees[i].name;\n  \tthis.model2.position = this.employees[i].position;\n  \tthis.model2.email = this.employees[i].email;\n  \tthis.myValue = i;\n  }\n  updateEmployee():void{\n  \tlet i = this.myValue;\n  \tfor (let j = 0; j < this.employees.length; j++) {\n  \t\tif (i == j) {\n  \t\t\tthis.hideUpdate = true;\n  \t\t\tthis.employees[i] = this.model2;\n  \t\t\tthis.model2 = {};\n  \t\t\tthis.msg = 'Employee updated successful';\n  \t\t}\n  \t}\n  }\n  closeAlert():void{\n  \tthis.msg = '';\n  }\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}